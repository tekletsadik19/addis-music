// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  email           String      @unique
  name            String
  createdAt       DateTime    @default(now())
  emailVerified   DateTime?   @map("verifiedAt")
  image           String?
  accounts        Account[]
  library         Library[]   @relation("user_library")
  favorites       Favorite[]  @relation("user_favorites")
  sessions        Session[]
  @@map("users")
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken    String      @unique
  userId          String      @db.ObjectId
  expires         DateTime    @map("expiresAt")
  user            User        @relation(fields: [userId], references: [id])
  @@map("sessions")
}
 
model VerificationToken {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  identifier      String
  token           String      @unique
  expires         DateTime    @map("expiresAt")
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Track {
  id          String      @id @default(cuid()) @map("_id")
  spotifyId   String      @unique
  name        String
  album       String
  artist      String
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  library     Library     @relation("track_library",fields: [trackId], references: [id])
  trackId     String
}

model Favorite {
  id          String      @id @default(cuid()) @map("_id")
  userId      String      @map("user_id")
  trackId     String      @map("track_id")
  user        User        @relation("user_favorites", fields: [userId], references: [id])
  createdAt   DateTime    @default(now()) 
}

model Library {
  id          String      @id @default(cuid()) @map("_id")
  spotifyId   String      @unique
  name        String
  album       String
  artist      String
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation("user_library", fields: [userId], references: [id])
  track       Track[]     @relation("track_library")
  userId      String
  trackId     String
}